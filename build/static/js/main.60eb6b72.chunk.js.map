{"version":3,"sources":["actions/Types.js","apis/OpenWeatherMapAPI.js","actions/index.js","components/SearchBar.js","components/Chart.js","components/Map.js","components/Cities.js","components/App.js","reducers/index.js","reducers/WeatherReducer.js","index.js"],"names":["FETCH_WEATHER","axios","create","baseURL","fetchWeather","city","dispatch","a","OpenWeatherMapAPI","get","data","type","payload","SearchBar","state","term","event","preventDefault","this","props","setState","onSubmit","onFormSubmit","className","value","onChange","onInputChange","target","React","Component","connect","Chart","_","sum","length","height","width","color","units","MyMapComponent","withScriptjs","withGoogleMap","defaultZoom","defaultCenter","lat","lng","lon","position","Map","isMarkerShown","googleMapURL","loadingElement","style","containerElement","mapElement","Cities","weather","list","map","w","main","humidity","pressure","temp","coord","renderMap","renderTemperature","renderPressure","renderHumidity","name","renderCity","App","combineReducers","action","store","createStore","Reducers","applyMiddleware","ReduxThunk","ReactDom","render","document","querySelector"],"mappings":"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","file":"static/js/main.60eb6b72.chunk.js","sourcesContent":["export const FETCH_WEATHER = 'FETCH_WEATHER';","import axios from \"axios\";\r\n\r\nexport const API_KEY = '9e3158e8c55521005017a83d03c74cbb';\r\n\r\nexport default axios.create({\r\n    baseURL: `http://api.openweathermap.org/data/2.5`\r\n});","import {FETCH_WEATHER} from \"./Types\";\r\nimport OpenWeatherMapAPI, {API_KEY} from \"../apis/OpenWeatherMapAPI\";\r\n\r\nexport const fetchWeather = (city) => async (dispatch) => {\r\n    const { data } = await OpenWeatherMapAPI.get(`forecast?appid=${API_KEY}&q=${city},us`);\r\n    dispatch({type: FETCH_WEATHER, payload: data});\r\n}","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchWeather } from \"../actions\";\r\n\r\nclass SearchBar extends React.Component {\r\n\r\n    state = {term: ''};\r\n\r\n    onFormSubmit(event) {\r\n        event.preventDefault();\r\n        this.props.fetchWeather(this.state.term);\r\n        this.setState({term: ''});\r\n    }\r\n\r\n    onInputChange(term) {\r\n        this.setState({term});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={(event) => this.onFormSubmit(event)} >\r\n                <div className=\"input-group\">\r\n                    <input\r\n                        className=\"form-control\"\r\n                        value={this.state.term}\r\n                        onChange={(event) => this.onInputChange(event.target.value)}\r\n                    />\r\n                    <span className=\"input-group-btn\">\r\n                        <button className=\"btn btn-light\">Search</button>\r\n                    </span>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(null, { fetchWeather })(SearchBar);","import React from 'react';\r\nimport _ from \"lodash\";\r\nimport {Sparklines, SparklinesLine, SparklinesReferenceLine} from 'react-sparklines';\r\n\r\nconst Chart = (props) => {\r\n    const data = _.sum(props.data)/props.data.length;\r\n    return (\r\n       <div>\r\n           <Sparklines height={100} width={140} data={props.data} >\r\n               <SparklinesLine color={props.color} />\r\n               <SparklinesReferenceLine type=\"avg\" />\r\n           </Sparklines>\r\n           <div className=\"text-center\">{data} {props.units}</div>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default Chart;","import React from \"react\";\r\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\"\r\n\r\nconst MyMapComponent = withScriptjs(withGoogleMap((props) =>\r\n        <GoogleMap\r\n            defaultZoom={8}\r\n            defaultCenter={{ lat: props.lat, lng: props.lon }}\r\n        >\r\n            <Marker position={{ lat: props.lat, lng: props.lon }} />\r\n        </GoogleMap>\r\n));\r\n\r\nconst Map =  (props) => {\r\n    return (\r\n        <MyMapComponent\r\n            lat={props.lat}\r\n            lon={props.lon}\r\n            isMarkerShown\r\n            googleMapURL=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyAq06l5RUVfib62IYRQacLc-KAy0XIWAVs\"\r\n            loadingElement={<div style={{ height: `100%` }} />}\r\n            containerElement={<div style={{ height: `200px` }} />}\r\n            mapElement={<div style={{ height: `100%` }} />}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Map;","import React from \"react\";\r\nimport { connect } from \"react-redux\"\r\nimport { fetchWeather } from \"../actions\";\r\nimport Chart from \"./Chart\";\r\nimport Map from \"./Map\";\r\n\r\nclass Cities extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.props.fetchWeather();\r\n    }\r\n\r\n    renderHumidity(weather) {\r\n        return weather.list.map(w => w.main.humidity);\r\n    }\r\n\r\n    renderPressure(weather) {\r\n        return weather.list.map(w => w.main.pressure);\r\n    }\r\n\r\n    renderTemperature(weather) {\r\n        return weather.list.map(w => w.main.temp);\r\n    }\r\n\r\n    renderMap(weather) {\r\n        const { lat, lon } = weather.city.coord;\r\n        return <Map lat={lat} lon={lon} />;\r\n    }\r\n\r\n    renderCity() {\r\n\r\n        return this.props.weather.map( weather => {\r\n            return (\r\n                <tr key={weather.city.name}>\r\n                    <td>{this.renderMap(weather)}</td>\r\n                    <td>\r\n                        <Chart data={this.renderTemperature(weather)} color='orange' units='K' />\r\n                    </td>\r\n                    <td>\r\n                        <Chart data={this.renderPressure(weather)} color='green' units='HPA' />\r\n                    </td>\r\n                    <td>\r\n                        <Chart data={this.renderHumidity(weather)} color='black' units='%' />\r\n                    </td>\r\n                </tr>\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <table className=\"mt-3 table table-stripped table-hover\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>City</th>\r\n                        <th>Temperature (k)</th>\r\n                        <th>Pressure (HPA)</th>\r\n                        <th>Humidity (%)</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.renderCity()}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { weather: state.weather };\r\n}\r\n\r\nexport default connect(mapStateToProps, { fetchWeather })(Cities);","import React from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport Cities from \"./Cities\";\r\n\r\nconst App = () => {\r\n    return (\r\n        <div className=\"container p-5\">\r\n            <SearchBar />\r\n            <Cities />\r\n        </div>\r\n    );\r\n}\r\nexport default App;","import { combineReducers } from \"redux\";\r\nimport WeatherReducer from \"./WeatherReducer\";\r\n\r\nexport default combineReducers({\r\n    weather: WeatherReducer\r\n});","import {FETCH_WEATHER} from \"../actions/Types\";\r\n\r\nexport default (state = [], action) => {\r\n    switch (action.type) {\r\n        case FETCH_WEATHER:\r\n            return [ action.payload, ...state ];\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport ReduxThunk from \"redux-thunk\";\r\nimport Reducers from \"./reducers\";\r\n\r\nconst store = createStore(Reducers, applyMiddleware(ReduxThunk));\r\n\r\nReactDom.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.querySelector('#root')\r\n);"],"sourceRoot":""}